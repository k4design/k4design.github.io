// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

enum ListingStatus {
  ACTIVE
  PENDING
  SOLD
  RENTED
  WITHDRAWN
  EXPIRED
}

enum MediaType {
  IMAGE
  VIDEO
  VIRTUAL_TOUR
  DOCUMENT
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  INTERESTED
  NOT_INTERESTED
  CONVERTED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  MLS_SYNC
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?   // For email/password auth
  role          UserRole  @default(VIEWER)
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  sessions      Session[]
  accounts      Account[]
  auditLogs     AuditLog[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Page {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  content     String   // Structured content (hero, sections, etc.) as JSON string
  seoTitle    String?
  seoDescription String?
  ogImage     String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("pages")
}

model Agent {
  id            String   @id @default(cuid())
  slug          String   @unique
  name          String
  email         String?
  phone         String?
  license       String?
  bio           String?
  portrait      String?
  specialties   String   // Array of specialty tags as JSON string
  markets       String   // Array of market areas as JSON string
  socials       String?  // Social media links as JSON string
  featured      Boolean  @default(false)
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  listings      Listing[]

  @@map("agents")
}

model Listing {
  id              String        @id @default(cuid())
  slug            String        @unique
  mlsId           String?       @unique // MLS Listing ID
  mlsListingKey   String?       @unique // MLS Listing Key
  mlsSource       String?       // Which MLS system this came from
  
  // Basic Info
  title           String
  description     String?
  status          ListingStatus @default(ACTIVE)
  price           Float?
  priceDisplay    String?       // Formatted price for display
  
  // Address
  streetAddress   String?
  city            String?
  state           String?
  zipCode         String?
  country         String?
  latitude        Float?
  longitude       Float?
  
  // Property Details
  bedrooms        Int?
  bathrooms       Float?
  squareFeet      Int?
  lotSize         Float?
  yearBuilt       Int?
  propertyType    String?       // Single Family, Condo, etc.
  
  // Features
  lifestyles      String        // Lifestyle tags (luxury, waterfront, etc.) as JSON string
  amenities       String        // Property amenities as JSON string
  
  // Media
  heroImage       String?
  virtualTour     String?
  
  // MLS Metadata
  mlsLastUpdated  DateTime?
  mlsStatus       String?
  isMlsSourced    Boolean       @default(false)
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  agentId         String?
  agent           Agent?        @relation(fields: [agentId], references: [id])
  media           Media[]
  leads           Lead[]

  @@map("listings")
}

model Media {
  id          String    @id @default(cuid())
  listingId   String
  type        MediaType @default(IMAGE)
  url         String
  alt         String?
  caption     String?
  order       Int       @default(0)
  isHero      Boolean   @default(false)
  createdAt   DateTime  @default(now())

  // Relations
  listing     Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("media")
}

model Lead {
  id          String     @id @default(cuid())
  email       String
  name        String?
  phone       String?
  message     String?
  status      LeadStatus @default(NEW)
  source      String?    // Which page/form the lead came from
  context     String?    // Additional context data as JSON string
  
  // Property context
  listingId   String?
  listing     Listing?   @relation(fields: [listingId], references: [id])
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("leads")
}

model SavedSearch {
  id          String   @id @default(cuid())
  userId      String?  // Nullable for anonymous searches
  name        String
  filters     String   // Search filters as JSON string
  email       String?  // For anonymous users
  isActive    Boolean  @default(true)
  lastRun     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("saved_searches")
}

model AuditLog {
  id        String      @id @default(cuid())
  userId    String?
  action    AuditAction
  entity    String      // Table name (listings, agents, etc.)
  entityId  String?     // ID of the affected record
  changes   String?     // Before/after data as JSON string
  metadata  String?     // Additional context as JSON string
  ipAddress String?
  userAgent String?
  createdAt DateTime    @default(now())

  // Relations
  user      User?       @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model MlsSync {
  id            String   @id @default(cuid())
  source        String   // MLS system name
  status        String   // success, error, in_progress
  recordsProcessed Int   @default(0)
  recordsCreated   Int   @default(0)
  recordsUpdated   Int   @default(0)
  recordsDeleted   Int   @default(0)
  errors        String?  // Error details as JSON string
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  lastListingKey String? // For pagination

  @@map("mls_syncs")
}